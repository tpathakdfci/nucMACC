
//                     nextflow based nucMACC pipeline config

// container settings

params.container_engine = 'docker' // docker (default) or singularity
process.container = 'uschwartz/nucmacc'

if (params.container_engine == 'singularity') {
    singularity {
        enabled = true
        autoMounts = true
    }
    docker.enabled = false
} 

if (params.container_engine == 'docker') {
    docker {
        enabled = true
        runOptions = '-u $(id -u):$(id -g)'
    }
    singularity.enabled = false
}

// Error handling for invalid container engine
if (params.container_engine != 'docker' && params.container_engine != 'singularity') {
    System.err.println("ERROR: Invalid container engine: '${params.container_engine}'. Please use either 'docker' or 'singularity'.")
    System.exit(1)
}

// Global default params, used in configs
params {
 

    // Workflow
    analysis="nucMACC"

    // Directories
    csvInput = null
    outDir = null
    genomeIdx = null
    genome = null


    // Options
    help = false
    // path to reference file for TSS plots
    TSS = false
    //Path to file for filtering regions
    blacklist = false
    //efective genome size for normalisation
    genomeSize = 5000000
    // correlation method for correlationHeatmap ("spearman" or "pearson")
    correlationMethod = 'spearman'
    // whether to publish bam files
    publishBam = false
    // whether to publish size selected bam files
    publishBamFlt = false
    // wheter to use bam files created from prior MNaseQC run
    bamEntry = false
    test = false

    // Resources
    low_memory = 14.GB
    high_memory = 45.GB


}

// change optional params for test RUN with toyData

if (params.test) {
  params.TSS = "$projectDir/toyData/dm3.refGene_chr3R_cut.gtf"
  params.blacklist = "$projectDir/toyData/dm3-blacklistChromosomes_chr3R_cut.bed"

  //change csvInput for testing bamEntry
  if (params.bamEntry == true) {
    params.csvInput = "$projectDir/toyData/sub_input.csv"
    }

  //additional options for MNaseQC test RUN
  if (params.analysis == "MNaseQC") {
    params.csvInput = "$projectDir/toyData/input_replicates.csv"
    params.outDir="$launchDir/MNaseQC_test"
    params.tracedir = "${params.outDir}/pipeline_info"
    }
}


process {
    withLabel: bigCPU {
        cpus = 5
    }
    withLabel: big {
        cpus = 5
        memory = params.high_memory
    }
    withLabel: mid {
        cpus = 2
        memory = params.low_memory
    }
}

// reporting

manifest {
  name = 'uschwartz/nucMACC'
  author = 'Uwe Schwartz'
  description = 'Nextflow differential MNase-seq analysis pipeline'
  mainScript = 'main.nf'
  version = '01.0.0'
}

// pipeline reports
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
